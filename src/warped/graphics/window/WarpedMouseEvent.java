/* WarpedFramework 2D - java API - Copyright (C) 2021-2024 Angelo Wilson | released under LGPL 2.1-or-later https://opensource.org/license/lgpl-2-1*/

package warped.graphics.window;

import java.awt.Point;
import java.awt.event.MouseEvent;
import java.awt.event.MouseWheelEvent;

import warped.user.mouse.MouseEventType;
import warped.user.mouse.WarpedMouseHandler;
import warped.utilities.math.vectors.VectorD;
import warped.utilities.utils.Console;

public class WarpedMouseEvent {

	private MouseEvent e;
	private MouseEventType eventType;
	private Point windowP;   //mouse event location relative to the canvas
	private Point viewPortP; //mouse event location relative to the view port
	private Point objectP; //mouse event location relative to the object 
	private Point traceP; // mouse event trace, updated at each stage of mouse handleing -> screen -> view port -> view port layer -> object
		
	protected WarpedMouseHandler handler;
	
	/**A primary mouse event, generated by WarpedMouse and passed to the WarpedWindow for further processing*/
	protected WarpedMouseEvent(MouseEvent e, MouseEventType eventType) {
		handler = new WarpedMouseHandler();
		this.e = e;
		this.eventType = eventType;
		updateTrace(e);
	}
	
	/**A mouse event cloned in the WarpedWindow from the primary mouse event and passed to the WarpedViewports for further processing*/
	protected WarpedMouseEvent(WarpedMouseEvent e) {
		this.e = e.e;
		this.eventType = e.eventType;
		this.handler = e.handler;
		
		updateTrace(e.e);
				
		if(e.viewPortP == null) viewPortP = new Point();
		else viewPortP = new Point(e.viewPortP);
		
		if(e.objectP == null) objectP = new Point();
		else objectP = new Point(e.objectP);
	}
	
	/**Get the AWT mouse event.
	 * @return MouseEvent - the Java AWT mouse event enclosed.
	 * @deprecated shouldn't normally need this, instead use getPointRelativeTo...()\
	 * @author 5som3 */
	public MouseEvent getMouseEvent() {return e;}
	
	/**Get the AWT mouse wheel event
	 * @return MouseWheelEvent - the Java AWT mouse wheel event.
	 * @implNote Will return null with error if the MouseEventType is not WHEEL_ROTATION.
	 * @implNote Get the AWT mouse wheel event.
	 * @deprecated shouldn't normally need this, instead use getWheelRotation() 
	 * @author 5som3*/
	public MouseWheelEvent getWheelEvent() {
		if(eventType == MouseEventType.WHEEL_ROTATION)	return (MouseWheelEvent)e;
		else {
			Console.err("WarpedMouseEvent -> getWheelEvent() -> mouse event is not a wheel event");
			return null;
		}
	}
	
	/**Get the button associated with this mouse event.
	 * @return int - the int code associated with the button event.
	 * @return 1 - The button assigned to left mouse button is the event button.
	 * @return 2 - The button assigned to middle mouse button is the event button (mouse wheel button).
	 * @return 3 - The button assigned to right mouse button is the event button.
	 * @author 5som3*/
	public int getButton() {return e.getButton();}
	
	/**Get the type of mouse event.
	 * @return MouseEventType - the type of mouse event 
	 * @author 5som3*/
	public MouseEventType getMouseEventType() {return eventType;}
	
	/**Get the mouse point relative to the window
	 * @return Point - the point measured as the distance in pixels from the top left corner of the window to the mouse point.
	 * @author 5som3*/
	public Point getPointRelativeToWindow() {return windowP;}
	
	/**Get the mouse point relative to the viewport
	 * @return Point - the point measured as distance in pixels from the top left corner of the viewport to the mouse point.
	 * @author 5som3*/
	public Point getPointRelativeToViewPort() {return viewPortP;}
	
	/**Get the mouse point relative to the object
	 * @return Point - the point measured as distance in pixels from the top left corner of the objects raster to the mouse point. 
	 * @author 5som3*/
	public Point getPointRelativeToObject() {return objectP;}
	
	/**Get the number of 'clicks' rotated by the mouse wheel
	 * @return int - the number of clicks rotated 
	 * @apiNote Positive clicks result from rotation toward the user (down)
	 * @apiNote Negative clicks result from rotation away from the user (up)
	 * @author 5som3*/
	public int getWheelRotation() {
		if(eventType == MouseEventType.WHEEL_ROTATION) {
			MouseWheelEvent e = (MouseWheelEvent) this.e;
			return e.getWheelRotation();
		} else {
			Console.err("WarpedMouseEvent -> getWheelEvent() -> mouse event is not a wheel event");
			return 0;
		}
	}
	
	/**Get the precise wheel rotation (if supported by the users mouse)
	 * @return double - the number of clicks rotated 
	 * @apiNote Positive clicks result from rotation toward the user (down)
	 * @apiNote Negative clicks result from rotation away from the user (up)
	 * @apiNote If the users mouse dosen't support precise rotation this will be effectively the same as calling getWheelRotation();
	 * @author 5som3*/
	public double getWheelRotationPrecise() {
		if(eventType == MouseEventType.WHEEL_ROTATION) {
			MouseWheelEvent e = (MouseWheelEvent) this.e;
			return e.getPreciseWheelRotation();
		} else {
			Console.err("WarpedMouseEvent -> getWheelEvent() -> mouse event is not a wheel event");
			return 0;
		}
	}
	
	/**Has any clone of the event been been executed by another viewport already*/
	protected boolean isHandled() {return handler.isHandled();}
	
	/**The mouse event has been handled and any clones of it should not be executed*/
	protected void handle() {handler.handle();}
	
	/**The trace, updated progressively as the event is processed by WarpedWindow -> WarpedViewport -> WarpedObject*/
	protected Point getPointTrace() {return traceP;}
	
	/**Called when cloning a mouse event*/
	private void updateTrace(MouseEvent e) {
		traceP  = new Point(e.getPoint().x, e.getPoint().y);
		traceP.x /= WarpedWindow.getWindowScale().x();
		traceP.y /= WarpedWindow.getWindowScale().y();
		windowP = (Point)traceP.clone();
	}
	
	/**Called by viewport*/
	protected void updateTrace(WarpedViewport viewPort) {
		traceP.setLocation(traceP.x - viewPort.getX(), traceP.y - viewPort.getY());
		viewPortP = (Point)traceP.clone();		
	}
	
	/**DO NOT CALL - called automatically by the WarpedObject when receiving a mouse event
	 * @implNote updates the trace of the event accounting for the object offset*/
	public void updateTrace(VectorD object) {
		traceP.setLocation(traceP.x - object.x(), traceP.y - object.y());
		objectP = (Point)traceP.clone();
	}
	

	
	
}
